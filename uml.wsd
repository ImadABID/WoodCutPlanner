@startuml
left to right direction

package "fr.enseirb_matmeca.p220_iabied_nabrouk_wamine"{

    package "logic"{

        interface BasicObject{

            + {static} BasicObject buildBasicObject(String type, ArrayList<String> paramList) \n\t throws IllegalArgumentException

            + boolean isValid()

        }

        interface CutAlgos{

            + {static} CutAlgos getAlgo(String algo) throws IllegalArgumentException

            + ArrayList<Writable> optimiseCuts(ArrayList <Readable> readableBoards, ArrayList <Readable> readablePanels)

        }

        interface Readable{

            + {static} Readable getReadable(String type, ArrayList<BasicObject> paramList) throws IllegalArgumentException

            + String toString()

            + {static} void printList(ArrayList<Readable> readableList)

        }

        interface Writable{

            + ArrayList<String> getFields()

            + String toString()

            + {static} void printList(ArrayList<Writable> writableList)

        }

        class Id implements BasicObject{

            - int value
            - boolean isValid

            + Id(int value)
            + Id(ArrayList<String> paramList)
            + boolean isValid()
            + int getId()

        }

        class Number implements BasicObject{

            - int value
            - boolean isValid

            + Number(int value)
            + Number(ArrayList<String> paramList)
            + boolean isValid()
            + int getNumber()

        }

        class Price implements BasicObject {

            - Double value
            - boolean isValid

            + Price(Double value)
            + Price(ArrayList<String> paramList)
            + boolean isValid()
            + Double getPrice()

        }

         class Polygon implements BasicObject {

            # ArrayList<Point> pts

            + Polygon(ArrayList<String> pts_str)
            + Polygon()
            + boolean isValid()
            + ArrayList<Point> getPts()
            + Point getTopLeftPosition()
            + void setTopLeftPosition(Point topLeftPoint)
            + Polygon deepCopy()
            + {static} boolean overlap(Polygon p1, Polygon p2)

        }


        abstract class Actor {

            + Id getId()

        }
        Actor *-- Id

       class Board extends WoodPiece{

            - boolean pulledOut

            + Board(Id actorId,
        Id typeId, Id idInsideGroup, Number nbrPiecesFromType,
        Polygon polygon,
        Deadline critical_date,
        Price price)
            + Board(ArrayList<BasicObject> paramList)

            + boolean isPulledOut()
            + void setAsPulledOut()
            + String toString()
            + {static} void printList(ArrayList<Board> boards)
            + {static} ArrayList<Board> boardsFromReadabls(ArrayList<Readable> readabls)

        }

        class Client extends Actor{
}

        class Supplier extends Actor{
}

        class Cut implements Writable{

               - Panel panel;
               - Board board;
               - Point position;

               + Cut(Panel panel, Board board, Point position)
               + Panel getPanel()
               + Board getBoard()
               + Point getPosition()
               + ArrayList<String> getFields()
               + String toString()
               + {static} void printList(ArrayList<Cut> cuts)
               + boolean is_delivery_possible()
}

        class CutStep2Algo implements CutAlgos{


               + ArrayList<Writable> optimiseCuts(ArrayList <Readable> readableBoards, ArrayList <Readable> readablePanels)
               + {static} ArrayList<Board> CorrespondingBoardsForPanel(List<Board> boards, Panel panel, int quantity)
               + {static} boolean is_rectangle(Polygon p)
}

        class CutStep3Algo1 implements CutAlgos{


               + ArrayList<Writable> optimiseCuts(ArrayList <Readable> readableBoards, ArrayList <Readable> readablePanels)
               + {static}ArrayList<Cut> findBoardsForPanel(Panel panel, ArrayList<Board> boards)
               + {static} ArrayList<Cut> findBoardsForPanel(Panel panel, ArrayList<Board> boards, boolean cuts_direction_vertical)
               - {static} boolean isCutPossible(Cut cut)
}

        class CutStep3Algo2 implements CutAlgos{


               + ArrayList<Writable> optimiseCuts(ArrayList <Readable> readableBoards, ArrayList <Readable> readablePanels)
               + {static}ArrayList<Cut> findBoardsForPanel(Panel panel, ArrayList<Board> boards)
               + {static} ArrayList<Cut> findBoardsForPanel(Panel panel, ArrayList<Board> boards, boolean cuts_direction_vertical)
               - {static} boolean isCutPossible(Cut cut)
}

        abstract class WoodPiece implements Readable {

            # Id actorId;
            # Id typeId;
            protected Id idInsideGroup;
            # Number nbrPiecesFromType;

            # Polygon polygon;
            # Rectangle boundingRect;

            # Deadline critical_date;

            # Price price;

            + WoodPiece(Id actorId,Id typeId, Id idInsideGroup, Number nbrPiecesFromType,
        Polygon polygon,
        Deadline critical_date,
        Price price
    )

            + WoodPiece(ArrayList<BasicObject> paramList)
            + getActorId()
            + Id getTypeId()
            + Id getIdInsideGroup()
            + Number getNbrPiecesFromType()
            + Polygon getPolygon()
            + void setPolygone(Polygon p)
            + Rectangle getBoundingRect()
            + void setBoundingRect(Rectangle rect)
            + Deadline getCritical_date()
            + Price getPrice()
            + String toString(String actorType)
            + void setNbrPiecesFromType(Number nbrPiecesFromType)

        }
        WoodPiece *-- Id






    }
    package "io"{
       interface Reader{

            + {static}Reader getReadr(String type) \n\t throws IllegalArgumentException
            + ArrayList<Readable> read(String path);


        }

       interface Writer{

            + {static}Writer getWriter(String type) \n\t throws IllegalArgumentException

            + void write(ArrayList<Writable> cuts, String path);

        }

       class XMLReader implements Reader {

            + ArrayList<Readable> read(String path)

        }

        class XMLWriter implements Writer {

            + void write(ArrayList<Writable> cuts, String path)

        }

        class SVGWriter implements Writer {

            + void write(ArrayList<Writable> cuts, String path)

        }

    }

}
@enduml