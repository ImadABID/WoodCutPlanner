@startuml uml

left to right direction

package "fr.enseirb_matmeca.p220_iabied_nabrouk_wamine"{

    package "basic_geometry"{

        class basic_geometry.Point {

            - double x
            - double y

            + Point(double x, double y)\n\tthrows IllegalArgumentException
            + Point()
            + double getX()
            + void setX(double x)
            + double getY()
            + void setY(double y)

        }

        class basic_geometry.Polygon {

            + Polygon(List<Point> pts)
            + Polygon()
            + List<Point> getPts();
            + {static} boolean overlap(Polygon p1, Polygon p2)

        }
        basic_geometry.Polygon "1" *-- "*" basic_geometry.Point

        class basic_geometry.Rectangle {

            - double lenght
            - double width
            
            + Rectangle(Point leftTopPt, double lenght, double width)\n\tthrows IllegalArgumentException
            + Point getLeftTopPt()
            + double getLenght()
            + double getWidth()
            + {static} boolean overlap(Rectangle r1, Rectangle r2)
        }
        basic_geometry.Rectangle *-- basic_geometry.Point

        basic_geometry.Polygon <|-- basic_geometry.Rectangle

    }

    package "logic"{

        abstract class logic.Actor{
            # int id

            + int getId()
            + {static} Actor getByIdIfNExistCreateIt(List<? extends Actor> actors, int id) \n\tthrows IllegalArgumentException
        }

        class logic.Client{

        }

        class logic.Supplier{
            
        }

        logic.Actor <|-- logic.Client
        logic.Actor <|-- logic.Supplier

        abstract class logic.WoodPiece {
            
            # int actorId
            # int typeId
            # int idInsideGroup
            # int nbrPiecesFromType
            # Date critical_date
            # double price

            + WoodPiece(\n\tint actorId,\n\tint typeId, int idInsideGroup, int nbrPiecesFromType,\n\tPolygone  polygone,\n\tDate critical_date,\n\tdouble price)\n\tthrows IllegalArgumentException
            + int getTypeId()
            + int getIdInsideGroup()
            + int getNbrPiecesFromType()
            + Polygon getPolygon()
            + Date getCritical_date()
            + double getPrice()

        }
        logic.WoodPiece *-- basic_geometry.Polygon

        class logic.Panel {
            + Panel(\n\tint actorId,\n\tint typeId, int idInsideGroup, int nbrPiecesFromType,\n\tPolygone  polygone\n\tDate critical_date,\n\tdouble price,\n\tSupplier supplier)
            + Supplier getSupplier()
            + {static} List<Panel> readFromXML(String path, String tagName)
        }
        logic.Panel *-- logic.Supplier

        class logic.Board {
            + Board(\n\tint actorId,\n\tint typeId, int idInsideGroup, int nbrPiecesFromType,\n\tPolygone  polygone\n\tDate critical_date,\n\tdouble price,\n\tClient client)
            + Client getClient()
            + {static} List<Board> readFromXML(String path, String tagName)
            
        }
        logic.Board *-- logic.Client

        logic.WoodPiece <|-- logic.Panel
        logic.WoodPiece <|-- logic.Board

        package "cut" {
            
            class cut.Cut {

                + Cut(Panel panel, Board board, Point position)
                + Panel getPanel()
                + Board getBoard()
                + Point getPosition()
                + {static} void generateSVG(List<Cut> cuts, String path)
                + {static} void generateXML(List<Cut> cuts, String path)

            }
            cut.Cut *-- logic.Panel
            cut.Cut *-- logic.Board
            cut.Cut *-- basic_geometry.Point

            interface CutAlgos{
                + List<Cut> optimiseCuts(List<Board> boards, List<Panel> Panels)
            }

            class CutStep2Algo {
                + List<Cut> optimiseCuts(List<Board> boards, List<Panel> Panels)
            }

            class CutStep3Algo1 {
                + List<Cut> optimiseCuts(List<Board> boards, List<Panel> Panels)
            }

            class CutStep3Algo2 {
                + List<Cut> optimiseCuts(List<Board> boards, List<Panel> Panels)
            }

            class CutStep4Algo {
                + List<Cut> optimiseCuts(List<Board> boards, List<Panel> Panels)
            }

            CutAlgos <|-- CutStep2Algo
            CutAlgos <|-- CutStep3Algo1
            CutAlgos <|-- CutStep3Algo2
            CutAlgos <|-- CutStep4Algo

        }

    }

    package "io"{
        class io.Communicate {
            + {static} List<WoodPiece> readFromXML(String path, String tagName)
            + {static} void generateCutsXML(List<Cut> cuts)
            + {static} void generateCutsSVG(List<Cut> cuts);
        }
    }

}


@enduml